In GraphQL client describes what data they want from the backend and then backend responds only with the data the client requested. 
+ Solves the problem for over-dump and under-dump with the RESTAPI
+ Reolver to be defined by the client to access data from GraphQL from the backend

There are two ways to define the schema in the NestJS application with GraphQL
1. Schema First
type Author {
	id: Int!
	firstName: String!
	lastName: String!
	posts: [Post]
}

type Post {
	id: Int!
	title: String!
	votes: Int // Optional
}

type Query {
	author(id: Int!): Author
}

2. Object First
@Object Type()
export class Author {
	@Field(type => Int)
	id: number;

	@Field({ nullable: true })
	firstName?: string;

	@Field({ nullable: true })
	lastName?: string;
	
	@Field(type => [Post])
	posts: Post[];
}

Which is then converted to 
type Author {
	id: Int!
	firstName: String!
	lastName: String!
	posts: [Post]
}
